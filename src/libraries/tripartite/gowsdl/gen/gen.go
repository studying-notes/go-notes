// Code generated by gowsdl DO NOT EDIT.

package gen

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type Login struct {
	XMLName xml.Name `xml:"http://e3.org/eecmisws/soapws login"`

	LoginName *string `xml:"loginName,omitempty" json:"loginName,omitempty"`

	Password *string `xml:"password,omitempty" json:"password,omitempty"`
}

type LoginResponse struct {
	XMLName xml.Name `xml:"http://e3.org/eecmisws/soapws loginResponse"`

	Return_ *string `xml:"return,omitempty" json:"return,omitempty"`
}

type Unimethod struct {
	XMLName xml.Name `xml:"http://e3.org/eecmisws/soapws unimethod"`

	SessionId *string `xml:"sessionId,omitempty" json:"sessionId,omitempty"`

	Funccode *string `xml:"funccode,omitempty" json:"funccode,omitempty"`

	Args *string `xml:"args,omitempty" json:"args,omitempty"`
}

type UnimethodResponse struct {
	XMLName xml.Name `xml:"http://e3.org/eecmisws/soapws unimethodResponse"`

	Return_ *string `xml:"return,omitempty" json:"return,omitempty"`
}

type LoginNew struct {
	XMLName xml.Name `xml:"http://e3.org/eecmisws/soapws loginNew"`

	Args *string `xml:"args,omitempty" json:"args,omitempty"`
}

type LoginNewResponse struct {
	XMLName xml.Name `xml:"http://e3.org/eecmisws/soapws loginNewResponse"`

	Return_ *string `xml:"return,omitempty" json:"return,omitempty"`
}

type EecmiswsPortType interface {
	LoginNew(request *LoginNew) (*LoginNewResponse, error)

	LoginNewContext(ctx context.Context, request *LoginNew) (*LoginNewResponse, error)

	Unimethod(request *Unimethod) (*UnimethodResponse, error)

	UnimethodContext(ctx context.Context, request *Unimethod) (*UnimethodResponse, error)

	Login(request *Login) (*LoginResponse, error)

	LoginContext(ctx context.Context, request *Login) (*LoginResponse, error)
}

type eecmiswsPortType struct {
	client *soap.Client
}

func NewEecmiswsPortType(client *soap.Client) EecmiswsPortType {
	return &eecmiswsPortType{
		client: client,
	}
}

func (service *eecmiswsPortType) LoginNewContext(ctx context.Context, request *LoginNew) (*LoginNewResponse, error) {
	response := new(LoginNewResponse)
	err := service.client.CallContext(ctx, "urn:loginNew", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eecmiswsPortType) LoginNew(request *LoginNew) (*LoginNewResponse, error) {
	return service.LoginNewContext(
		context.Background(),
		request,
	)
}

func (service *eecmiswsPortType) UnimethodContext(ctx context.Context, request *Unimethod) (*UnimethodResponse, error) {
	response := new(UnimethodResponse)
	err := service.client.CallContext(ctx, "urn:unimethod", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eecmiswsPortType) Unimethod(request *Unimethod) (*UnimethodResponse, error) {
	return service.UnimethodContext(
		context.Background(),
		request,
	)
}

func (service *eecmiswsPortType) LoginContext(ctx context.Context, request *Login) (*LoginResponse, error) {
	response := new(LoginResponse)
	err := service.client.CallContext(ctx, "urn:login", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *eecmiswsPortType) Login(request *Login) (*LoginResponse, error) {
	return service.LoginContext(
		context.Background(),
		request,
	)
}
